/*
 * This file is generated by jOOQ.
 */
package com.aytdm.springbootjooq.domain.db.world.tables;


import com.aytdm.springbootjooq.domain.db.world.Indexes;
import com.aytdm.springbootjooq.domain.db.world.Keys;
import com.aytdm.springbootjooq.domain.db.world.World;
import com.aytdm.springbootjooq.domain.db.world.enums.CountrylanguageIsofficial;
import com.aytdm.springbootjooq.domain.db.world.tables.records.CountrylanguageRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Countrylanguage extends TableImpl<CountrylanguageRecord> {

    private static final long serialVersionUID = 2040672483;

    /**
     * The reference instance of <code>world.countrylanguage</code>
     */
    public static final Countrylanguage COUNTRYLANGUAGE = new Countrylanguage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountrylanguageRecord> getRecordType() {
        return CountrylanguageRecord.class;
    }

    /**
     * The column <code>world.countrylanguage.CountryCode</code>.
     */
    public final TableField<CountrylanguageRecord, String> COUNTRYCODE = createField("CountryCode", org.jooq.impl.SQLDataType.CHAR(3).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.countrylanguage.Language</code>.
     */
    public final TableField<CountrylanguageRecord, String> LANGUAGE = createField("Language", org.jooq.impl.SQLDataType.CHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>world.countrylanguage.IsOfficial</code>.
     */
    public final TableField<CountrylanguageRecord, CountrylanguageIsofficial> ISOFFICIAL = createField("IsOfficial", org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("F", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.aytdm.springbootjooq.domain.db.world.enums.CountrylanguageIsofficial.class), this, "");

    /**
     * The column <code>world.countrylanguage.Percentage</code>.
     */
    public final TableField<CountrylanguageRecord, Double> PERCENTAGE = createField("Percentage", org.jooq.impl.SQLDataType.FLOAT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.0", org.jooq.impl.SQLDataType.FLOAT)), this, "");

    /**
     * Create a <code>world.countrylanguage</code> table reference
     */
    public Countrylanguage() {
        this(DSL.name("countrylanguage"), null);
    }

    /**
     * Create an aliased <code>world.countrylanguage</code> table reference
     */
    public Countrylanguage(String alias) {
        this(DSL.name(alias), COUNTRYLANGUAGE);
    }

    /**
     * Create an aliased <code>world.countrylanguage</code> table reference
     */
    public Countrylanguage(Name alias) {
        this(alias, COUNTRYLANGUAGE);
    }

    private Countrylanguage(Name alias, Table<CountrylanguageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Countrylanguage(Name alias, Table<CountrylanguageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Countrylanguage(Table<O> child, ForeignKey<O, CountrylanguageRecord> key) {
        super(child, key, COUNTRYLANGUAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return World.WORLD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COUNTRYLANGUAGE_COUNTRYCODE, Indexes.COUNTRYLANGUAGE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CountrylanguageRecord> getPrimaryKey() {
        return Keys.KEY_COUNTRYLANGUAGE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CountrylanguageRecord>> getKeys() {
        return Arrays.<UniqueKey<CountrylanguageRecord>>asList(Keys.KEY_COUNTRYLANGUAGE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CountrylanguageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CountrylanguageRecord, ?>>asList(Keys.COUNTRYLANGUAGE_IBFK_1);
    }

    public Country country() {
        return new Country(this, Keys.COUNTRYLANGUAGE_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Countrylanguage as(String alias) {
        return new Countrylanguage(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Countrylanguage as(Name alias) {
        return new Countrylanguage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Countrylanguage rename(String name) {
        return new Countrylanguage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Countrylanguage rename(Name name) {
        return new Countrylanguage(name, null);
    }
}
